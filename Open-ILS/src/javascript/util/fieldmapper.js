
//  ----------------------------------------------------------------
// Autogenerated by fieldmapper.pl
// Requires JSON.js
//  ----------------------------------------------------------------

function FieldmapperException(message) {
	this.message = message;
}
FieldmapperException.toString = function() {
	return "FieldmapperException: " + this.message + "\n";
}



//  ----------------------------------------------------------------
// Class: cit
//  ----------------------------------------------------------------


function cit(array) {

	this.classname = "cit";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

cit._isfieldmapper = true;


cit.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
cit.prototype.name = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
cit.prototype.id = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
cit.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
cit.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asvq
//  ----------------------------------------------------------------


function asvq(array) {

	this.classname = "asvq";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asvq._isfieldmapper = true;


asvq.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asvq.prototype.question = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asvq.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asvq.prototype.survey = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asvq.prototype.responses = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asvq.prototype.id = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
asvq.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
asvq.prototype.answers = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}

//  ----------------------------------------------------------------
// Class: mafe
//  ----------------------------------------------------------------


function mafe(array) {

	this.classname = "mafe";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mafe._isfieldmapper = true;


mafe.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mafe.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mafe.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mafe.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mafe.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mafe.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
mafe.prototype.field = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}

//  ----------------------------------------------------------------
// Class: asvr
//  ----------------------------------------------------------------


function asvr(array) {

	this.classname = "asvr";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asvr._isfieldmapper = true;


asvr.prototype.answer = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asvr.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asvr.prototype.question = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asvr.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asvr.prototype.survey = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asvr.prototype.answer_date = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asvr.prototype.id = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
asvr.prototype.usr = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
asvr.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
asvr.prototype.effective_date = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}

//  ----------------------------------------------------------------
// Class: aout
//  ----------------------------------------------------------------


function aout(array) {

	this.classname = "aout";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

aout._isfieldmapper = true;


aout.prototype.parent = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
aout.prototype.can_have_vols = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
aout.prototype.name = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
aout.prototype.can_have_users = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
aout.prototype.children = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
aout.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
aout.prototype.depth = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
aout.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
aout.prototype.id = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
aout.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: cbs
//  ----------------------------------------------------------------


function cbs(array) {

	this.classname = "cbs";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

cbs._isfieldmapper = true;


cbs.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
cbs.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
cbs.prototype.id = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
cbs.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
cbs.prototype.quality = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
cbs.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asce
//  ----------------------------------------------------------------


function asce(array) {

	this.classname = "asce";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asce._isfieldmapper = true;


asce.prototype.owner = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asce.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asce.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asce.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asce.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asce.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: cmf
//  ----------------------------------------------------------------


function cmf(array) {

	this.classname = "cmf";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

cmf._isfieldmapper = true;


cmf.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
cmf.prototype.name = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
cmf.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
cmf.prototype.xpath = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
cmf.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
cmf.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
cmf.prototype.field_class = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}

//  ----------------------------------------------------------------
// Class: acn
//  ----------------------------------------------------------------


function acn(array) {

	this.classname = "acn";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

acn._isfieldmapper = true;


acn.prototype.edit_date = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
acn.prototype.creator = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
acn.prototype.create_date = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
acn.prototype.copies = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
acn.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
acn.prototype.editor = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
acn.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
acn.prototype.record = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
acn.prototype.owning_lib = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
acn.prototype.label = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
acn.prototype.id = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
acn.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: cst
//  ----------------------------------------------------------------


function cst(array) {

	this.classname = "cst";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

cst._isfieldmapper = true;


cst.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
cst.prototype.value = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
cst.prototype.id = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
cst.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
cst.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: bre
//  ----------------------------------------------------------------


function bre(array) {

	this.classname = "bre";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

bre._isfieldmapper = true;


bre.prototype.source = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
bre.prototype.edit_date = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
bre.prototype.call_numbers = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
bre.prototype.tcn_value = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
bre.prototype.creator = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
bre.prototype.active = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
bre.prototype.create_date = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
bre.prototype.deleted = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
bre.prototype.fingerprint = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
bre.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
bre.prototype.last_xact_id = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
bre.prototype.marc = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}
bre.prototype.editor = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
bre.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
bre.prototype.id = function(new_value) {
	if(new_value) { this.array[15] = new_value; }
	return this.array[15];
}
bre.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
bre.prototype.tcn_source = function(new_value) {
	if(new_value) { this.array[16] = new_value; }
	return this.array[16];
}

//  ----------------------------------------------------------------
// Class: msfe
//  ----------------------------------------------------------------


function msfe(array) {

	this.classname = "msfe";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

msfe._isfieldmapper = true;


msfe.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
msfe.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
msfe.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
msfe.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
msfe.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
msfe.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
msfe.prototype.field = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}

//  ----------------------------------------------------------------
// Class: acp
//  ----------------------------------------------------------------


function acp(array) {

	this.classname = "acp";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

acp._isfieldmapper = true;


acp.prototype.call_number = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
acp.prototype.edit_date = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
acp.prototype.creator = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
acp.prototype.fine_level = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
acp.prototype.circulate = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
acp.prototype.circ_as_type = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
acp.prototype.stat_cat_entries = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
acp.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
acp.prototype.editor = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
acp.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
acp.prototype.id = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
acp.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
acp.prototype.available = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
acp.prototype.deposit = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
acp.prototype.loan_duration = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}
acp.prototype.ref = function(new_value) {
	if(new_value) { this.array[15] = new_value; }
	return this.array[15];
}
acp.prototype.create_date = function(new_value) {
	if(new_value) { this.array[16] = new_value; }
	return this.array[16];
}
acp.prototype.barcode = function(new_value) {
	if(new_value) { this.array[17] = new_value; }
	return this.array[17];
}
acp.prototype.deposit_amount = function(new_value) {
	if(new_value) { this.array[18] = new_value; }
	return this.array[18];
}
acp.prototype.copy_number = function(new_value) {
	if(new_value) { this.array[20] = new_value; }
	return this.array[20];
}
acp.prototype.opac_visible = function(new_value) {
	if(new_value) { this.array[19] = new_value; }
	return this.array[19];
}
acp.prototype.price = function(new_value) {
	if(new_value) { this.array[21] = new_value; }
	return this.array[21];
}
acp.prototype.circ_modifier = function(new_value) {
	if(new_value) { this.array[22] = new_value; }
	return this.array[22];
}
acp.prototype.circ_lib = function(new_value) {
	if(new_value) { this.array[23] = new_value; }
	return this.array[23];
}

//  ----------------------------------------------------------------
// Class: au
//  ----------------------------------------------------------------


function au(array) {

	this.classname = "au";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

au._isfieldmapper = true;


au.prototype.profile = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
au.prototype.billing_address = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
au.prototype.usrgroup = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
au.prototype.alert_message = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
au.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
au.prototype.email = function(new_value) {
	if(new_value) { this.array[15] = new_value; }
	return this.array[15];
}
au.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
au.prototype.suffix = function(new_value) {
	if(new_value) { this.array[17] = new_value; }
	return this.array[17];
}
au.prototype.id = function(new_value) {
	if(new_value) { this.array[18] = new_value; }
	return this.array[18];
}
au.prototype.ident_value = function(new_value) {
	if(new_value) { this.array[21] = new_value; }
	return this.array[21];
}
au.prototype.active = function(new_value) {
	if(new_value) { this.array[23] = new_value; }
	return this.array[23];
}
au.prototype.home_ou = function(new_value) {
	if(new_value) { this.array[24] = new_value; }
	return this.array[24];
}
au.prototype.last_xact_id = function(new_value) {
	if(new_value) { this.array[25] = new_value; }
	return this.array[25];
}
au.prototype.dob = function(new_value) {
	if(new_value) { this.array[28] = new_value; }
	return this.array[28];
}
au.prototype.card = function(new_value) {
	if(new_value) { this.array[30] = new_value; }
	return this.array[30];
}
au.prototype.day_phone = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
au.prototype.usrname = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
au.prototype.super_user = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
au.prototype.claims_returned_count = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
au.prototype.family_name = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
au.prototype.standing = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}
au.prototype.first_given_name = function(new_value) {
	if(new_value) { this.array[16] = new_value; }
	return this.array[16];
}
au.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
au.prototype.gender = function(new_value) {
	if(new_value) { this.array[19] = new_value; }
	return this.array[19];
}
au.prototype.ident_type = function(new_value) {
	if(new_value) { this.array[20] = new_value; }
	return this.array[20];
}
au.prototype.mailing_address = function(new_value) {
	if(new_value) { this.array[22] = new_value; }
	return this.array[22];
}
au.prototype.other_phone = function(new_value) {
	if(new_value) { this.array[26] = new_value; }
	return this.array[26];
}
au.prototype.passwd = function(new_value) {
	if(new_value) { this.array[27] = new_value; }
	return this.array[27];
}
au.prototype.evening_phone = function(new_value) {
	if(new_value) { this.array[29] = new_value; }
	return this.array[29];
}
au.prototype.second_given_name = function(new_value) {
	if(new_value) { this.array[31] = new_value; }
	return this.array[31];
}
au.prototype.addresses = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
au.prototype.cards = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
au.prototype.master_account = function(new_value) {
	if(new_value) { this.array[32] = new_value; }
	return this.array[32];
}
au.prototype.usrid = function(new_value) {
	if(new_value) { this.array[34] = new_value; }
	return this.array[34];
}
au.prototype.prefix = function(new_value) {
	if(new_value) { this.array[33] = new_value; }
	return this.array[33];
}

//  ----------------------------------------------------------------
// Class: acpn
//  ----------------------------------------------------------------


function acpn(array) {

	this.classname = "acpn";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

acpn._isfieldmapper = true;


acpn.prototype.creator = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
acpn.prototype.value = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
acpn.prototype.create_date = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
acpn.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
acpn.prototype.owning_copy = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
acpn.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
acpn.prototype.id = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
acpn.prototype.title = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
acpn.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mmr
//  ----------------------------------------------------------------


function mmr(array) {

	this.classname = "mmr";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mmr._isfieldmapper = true;


mmr.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mmr.prototype.mods = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mmr.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mmr.prototype.fingerprint = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mmr.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mmr.prototype.master_record = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mmr.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mfr
//  ----------------------------------------------------------------


function mfr(array) {

	this.classname = "mfr";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mfr._isfieldmapper = true;


mfr.prototype.value = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mfr.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mfr.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mfr.prototype.ind1 = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mfr.prototype.record = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mfr.prototype.ind2 = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mfr.prototype.id = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
mfr.prototype.tag = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
mfr.prototype.subfield = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
mfr.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mkfe
//  ----------------------------------------------------------------


function mkfe(array) {

	this.classname = "mkfe";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mkfe._isfieldmapper = true;


mkfe.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mkfe.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mkfe.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mkfe.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mkfe.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mkfe.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
mkfe.prototype.field = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}

//  ----------------------------------------------------------------
// Class: mmrsm
//  ----------------------------------------------------------------


function mmrsm(array) {

	this.classname = "mmrsm";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mmrsm._isfieldmapper = true;


mmrsm.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mmrsm.prototype.metarecord = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mmrsm.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mmrsm.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mmrsm.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mmrsm.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asva
//  ----------------------------------------------------------------


function asva(array) {

	this.classname = "asva";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asva._isfieldmapper = true;


asva.prototype.question = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asva.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asva.prototype.answer = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asva.prototype.id = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asva.prototype.responses = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asva.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asva.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: ap
//  ----------------------------------------------------------------


function ap(array) {

	this.classname = "ap";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

ap._isfieldmapper = true;


ap.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
ap.prototype.name = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
ap.prototype.id = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
ap.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
ap.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mcp
//  ----------------------------------------------------------------


function mcp(array) {

	this.classname = "mcp";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mcp._isfieldmapper = true;


mcp.prototype.accepting_usr = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mcp.prototype.xact = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mcp.prototype.amount_collected = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
mcp.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mcp.prototype.payment_ts = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
mcp.prototype.note = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
mcp.prototype.amount = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mcp.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mcp.prototype.cash_drawer = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mcp.prototype.id = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
mcp.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: ascecm
//  ----------------------------------------------------------------


function ascecm(array) {

	this.classname = "ascecm";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

ascecm._isfieldmapper = true;


ascecm.prototype.stat_cat_entry = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
ascecm.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
ascecm.prototype.target_user = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
ascecm.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
ascecm.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
ascecm.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mtfe
//  ----------------------------------------------------------------


function mtfe(array) {

	this.classname = "mtfe";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mtfe._isfieldmapper = true;


mtfe.prototype.source = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mtfe.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mtfe.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mtfe.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mtfe.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mtfe.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
mtfe.prototype.field = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}

//  ----------------------------------------------------------------
// Class: mrd
//  ----------------------------------------------------------------


function mrd(array) {

	this.classname = "mrd";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mrd._isfieldmapper = true;


mrd.prototype.item_type = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mrd.prototype.pub_status = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mrd.prototype.control_type = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mrd.prototype.audience = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mrd.prototype.char_encoding = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
mrd.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mrd.prototype.enc_level = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
mrd.prototype.item_form = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
mrd.prototype.item_lang = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
mrd.prototype.record = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
mrd.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mrd.prototype.cat_form = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
mrd.prototype.id = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
mrd.prototype.bib_level = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}
mrd.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: aua
//  ----------------------------------------------------------------


function aua(array) {

	this.classname = "aua";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

aua._isfieldmapper = true;


aua.prototype.country = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
aua.prototype.post_code = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
aua.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
aua.prototype.street1 = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
aua.prototype.valid = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
aua.prototype.state = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
aua.prototype.city = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
aua.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
aua.prototype.street2 = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
aua.prototype.county = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
aua.prototype.id = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
aua.prototype.usr = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
aua.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
aua.prototype.address_type = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}

//  ----------------------------------------------------------------
// Class: acnn
//  ----------------------------------------------------------------


function acnn(array) {

	this.classname = "acnn";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

acnn._isfieldmapper = true;


acnn.prototype.owning_call_number = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
acnn.prototype.creator = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
acnn.prototype.value = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
acnn.prototype.create_date = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
acnn.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
acnn.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
acnn.prototype.id = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
acnn.prototype.title = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
acnn.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: ac
//  ----------------------------------------------------------------


function ac(array) {

	this.classname = "ac";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

ac._isfieldmapper = true;


ac.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
ac.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
ac.prototype.fine_interval = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
ac.prototype.id = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
ac.prototype.target_copy = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
ac.prototype.usr = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
ac.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
ac.prototype.xact_start = function(new_value) {
	if(new_value) { this.array[15] = new_value; }
	return this.array[15];
}
ac.prototype.duration = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
ac.prototype.note = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
ac.prototype.fine_amount = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
ac.prototype.stop_fines = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
ac.prototype.renewal_remaining = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
ac.prototype.xact_finish = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
ac.prototype.max_fines = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
ac.prototype.circ_lib = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}

//  ----------------------------------------------------------------
// Class: brn
//  ----------------------------------------------------------------


function brn(array) {

	this.classname = "brn";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

brn._isfieldmapper = true;


brn.prototype.node_type = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
brn.prototype.value = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
brn.prototype.name = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
brn.prototype.children = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
brn.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
brn.prototype.intra_doc_id = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
brn.prototype.owner_doc = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
brn.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
brn.prototype.parent_node = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
brn.prototype.id = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
brn.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
brn.prototype.namepsace_uri = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}

//  ----------------------------------------------------------------
// Class: mvr
//  ----------------------------------------------------------------


function mvr(array) {

	this.classname = "mvr";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mvr._isfieldmapper = true;


mvr.prototype.types_of_resource = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mvr.prototype.call_numbers = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mvr.prototype.pubdate = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mvr.prototype.subject = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mvr.prototype.doc_id = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
mvr.prototype.author = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
mvr.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mvr.prototype.doc_type = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
mvr.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mvr.prototype.copy_count = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
mvr.prototype.isbn = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
mvr.prototype.title = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
mvr.prototype.tcn = function(new_value) {
	if(new_value) { this.array[14] = new_value; }
	return this.array[14];
}
mvr.prototype.publisher = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}
mvr.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: ascecm
//  ----------------------------------------------------------------


function ascecm(array) {

	this.classname = "ascecm";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

ascecm._isfieldmapper = true;


ascecm.prototype.owning_copy = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
ascecm.prototype.stat_cat_entry = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
ascecm.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
ascecm.prototype.stat_cat = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
ascecm.prototype.id = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
ascecm.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
ascecm.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asce
//  ----------------------------------------------------------------


function asce(array) {

	this.classname = "asce";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asce._isfieldmapper = true;


asce.prototype.owner = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asce.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asce.prototype.value = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asce.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asce.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asce.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: aoa
//  ----------------------------------------------------------------


function aoa(array) {

	this.classname = "aoa";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

aoa._isfieldmapper = true;


aoa.prototype.country = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
aoa.prototype.post_code = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
aoa.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
aoa.prototype.street1 = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
aoa.prototype.valid = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
aoa.prototype.state = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
aoa.prototype.city = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
aoa.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
aoa.prototype.street2 = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
aoa.prototype.county = function(new_value) {
	if(new_value) { this.array[11] = new_value; }
	return this.array[11];
}
aoa.prototype.id = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
aoa.prototype.usr = function(new_value) {
	if(new_value) { this.array[12] = new_value; }
	return this.array[12];
}
aoa.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
aoa.prototype.address_type = function(new_value) {
	if(new_value) { this.array[13] = new_value; }
	return this.array[13];
}

//  ----------------------------------------------------------------
// Class: asv
//  ----------------------------------------------------------------


function asv(array) {

	this.classname = "asv";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asv._isfieldmapper = true;


asv.prototype.opac = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asv.prototype.name = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
asv.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asv.prototype.usr_summary = function(new_value) {
	if(new_value) { this.array[10] = new_value; }
	return this.array[10];
}
asv.prototype.questions = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asv.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asv.prototype.end_date = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asv.prototype.id = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
asv.prototype.responses = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asv.prototype.start_date = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
asv.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: mb
//  ----------------------------------------------------------------


function mb(array) {

	this.classname = "mb";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

mb._isfieldmapper = true;


mb.prototype.amount = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
mb.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
mb.prototype.billing_ts = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
mb.prototype.xact = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
mb.prototype.id = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
mb.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
mb.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
mb.prototype.note = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}

//  ----------------------------------------------------------------
// Class: aou
//  ----------------------------------------------------------------


function aou(array) {

	this.classname = "aou";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

aou._isfieldmapper = true;


aou.prototype.shortname = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
aou.prototype.ou_type = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
aou.prototype.parent_ou = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
aou.prototype.name = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
aou.prototype.children = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
aou.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
aou.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
aou.prototype.id = function(new_value) {
	if(new_value) { this.array[9] = new_value; }
	return this.array[9];
}
aou.prototype.address = function(new_value) {
	if(new_value) { this.array[8] = new_value; }
	return this.array[8];
}
aou.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asc
//  ----------------------------------------------------------------


function asc(array) {

	this.classname = "asc";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asc._isfieldmapper = true;


asc.prototype.owner = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asc.prototype.entries = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asc.prototype.name = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asc.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asc.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asc.prototype.opac_visible = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asc.prototype.id = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
asc.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: ac
//  ----------------------------------------------------------------


function ac(array) {

	this.classname = "ac";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

ac._isfieldmapper = true;


ac.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
ac.prototype.active = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
ac.prototype.id = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
ac.prototype.barcode = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
ac.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
ac.prototype.usr = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
ac.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}

//  ----------------------------------------------------------------
// Class: asc
//  ----------------------------------------------------------------


function asc(array) {

	this.classname = "asc";
	this._isfieldmapper = true;

	if(array) { 
		if( array.constructor == Array) 
			this.array = array;  

		else
			throw new FieldmapperException(
				"Attempt to build fieldmapper object with non-array");

	} else { this.array = []; }

}

asc._isfieldmapper = true;


asc.prototype.owner = function(new_value) {
	if(new_value) { this.array[4] = new_value; }
	return this.array[4];
}
asc.prototype.entries = function(new_value) {
	if(new_value) { this.array[3] = new_value; }
	return this.array[3];
}
asc.prototype.name = function(new_value) {
	if(new_value) { this.array[6] = new_value; }
	return this.array[6];
}
asc.prototype.isnew = function(new_value) {
	if(new_value) { this.array[0] = new_value; }
	return this.array[0];
}
asc.prototype.ischanged = function(new_value) {
	if(new_value) { this.array[1] = new_value; }
	return this.array[1];
}
asc.prototype.opac_visible = function(new_value) {
	if(new_value) { this.array[5] = new_value; }
	return this.array[5];
}
asc.prototype.id = function(new_value) {
	if(new_value) { this.array[7] = new_value; }
	return this.array[7];
}
asc.prototype.isdeleted = function(new_value) {
	if(new_value) { this.array[2] = new_value; }
	return this.array[2];
}
