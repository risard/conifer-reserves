#!/usr/bin/perl
use strict;
use warnings;
use bytes;

use OpenSRF::System;
use OpenSRF::EX qw/:try/;
use OpenSRF::AppSession;
use OpenSRF::Utils::SettingsClient;
use OpenILS::Application::AppUtils;
use OpenILS::Utils::Fieldmapper;

use MARC::Record;
use MARC::File::XML;
use UNIVERSAL::require;

use Getopt::Long;


my @formats = qw/USMARC UNIMARC XML/;

my ($config,$format,$encoding,$location,$dollarsign,$idl,$help,$holdings) = ('/openils/conf/bootstrap.conf','USMARC','MARC8','','$');

GetOptions(
        'help'      => \$help,
        'items'      => \$holdings,
        'location=s'      => \$location,
        'money=s'      => \$dollarsign,
        'config=s'      => \$config,
        'format=s'      => \$format,
        'xml-idl=s'      => \$idl,
        'encoding=s'      => \$encoding,
);

if ($help) {
	print <<"	HELP";
Usage: $0 [options]
 --help or -h		This screen.
 --config or -c		Configuration file [/openils/conf/bootstrap.conf]
 --format or -f		Output format (USMARC, UNIMARC, XML) [USMARC]
 --encoding or -e	Output Encoding (UTF-8, ISO-8859-?, MARC8) [MARC8]
 --items or -i		Include items (holdings) in the output
 --xml-idl or -x	Location of the IDL XML
 --location or -l	MARC Location Code for holdings from
 			http://www.loc.gov/marc/organizations/orgshome.html

Example:

  cat list_of_ids | $0 > output_file

	HELP
	exit;
}

$format = uc($format);
$encoding = uc($encoding);

binmode(STDOUT, ':raw') if ($encoding ne 'UTF-8');
binmode(STDOUT, ':utf8') if ($encoding eq 'UTF-8');

if (!grep { $format eq $_ } @formats) {
	die	"Please select a supported format.  ".
		"Right now that means one of [".
		join('|',@formats). "]\n";
}

if ($format ne 'XML') {
	my $type = 'MARC::File::' . $format;
	$type->require;
}

OpenSRF::System->bootstrap_client( config_file => $config );
my $sc = OpenSRF::Utils::SettingsClient->new;
$idl ||= $sc->config_value("IDL");

Fieldmapper->import(IDL => $idl);

my $ses = OpenSRF::AppSession->create('open-ils.cstore');

print <<HEADER if ($format eq 'XML');
<?xml version="1.0" encoding="$encoding"?>
<collection xmlns='http://www.loc.gov/MARC21/slim'>
HEADER

my %orgs;
if ($holdings) {
	my $o = $ses->request( 'open-ils.cstore.direct.actor.org_unit.search.atomic', { id => { '!=' => undef } } )->gather(1);
	%orgs = map { ( $_->id => $_ ) } @$o;
}

my %shelves;
if ($holdings) {
	my $s = $ses->request( 'open-ils.cstore.direct.asset.copy_location.search.atomic', { id => { '!=' => undef } } )->gather(1);
	%shelves = map { ( $_->id => $_ ) } @$s;
}

while ( my $i = <> ) {
	my $bib = $ses->request( 'open-ils.cstore.direct.biblio.record_entry.retrieve', $i )->gather(1);

	next unless $bib;

	my $r = MARC::Record->new_from_xml( $bib->marc, $encoding, $format );
	$r->delete_field( $_ ) for ($r->field(901));

	$r->append_fields(
		MARC::Field->new(
			901, '', '', 
			a => $bib->tcn_value,
			b => $bib->tcn_source
		)
	);

	if ($holdings) {
		my $cn_list = $ses->request(
			'open-ils.cstore.direct.asset.call_number.search.atomic',
			{ record => $i, deleted => 'f' }
		)->gather(1);


		my $cp_list = $ses->request(
			'open-ils.cstore.direct.asset.copy.search.atomic',
			{ call_number => [ map { $_->id } @$cn_list ], deleted => 'f' }
		)->gather(1);

		my %cn_map;
		push @{$cn_map{$_->call_number}}, $_ for (@$cp_list);

		for my $cn ( @$cn_list ) {
			my $cn_map_list = $cn_map{$cn->id};
			for my $cp ( @$cn_map_list ) {
				$r->append_fields(
					MARC::Field->new(
						852, '4', '', 
						a => $location,
						b => $orgs{$cn->owning_lib}->shortname,
						b => $orgs{$cp->circ_lib}->shortname,
						c => $shelves{$cp->location}->name,
						j => $cn->label,
						($cp->circ_modifier ? ( g => $cp->circ_modifier ) : ()),
						p => $cp->barcode,
						($cp->price ? ( y => $dollarsign.$cp->price ) : ()),
						($cp->copy_number ? ( t => $cp->copy_number ) : ()),
						($cp->ref eq 't' ? ( x => 'reference' ) : ()),
						($cp->holdable eq 'f' ? ( x => 'unholdable' ) : ()),
						($cp->circulate eq 'f' ? ( x => 'noncirculating' ) : ()),
						($cp->opac_visible eq 'f' ? ( x => 'hidden' ) : ()),
					)
				);
			}
		}
	}

	if (uc($format) eq 'XML') {
		print $r->as_xml_record;
	} elsif (uc($format) eq 'UNIMARC') {
		print $r->as_unimarc
	} elsif (uc($format) eq 'USMARC') {
		print $r->as_usmarc
	}
}

print "</collection>\n" if ($format eq 'XML');

