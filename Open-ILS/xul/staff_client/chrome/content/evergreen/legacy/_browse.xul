<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Cataloger's Search Result Screen -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- PRESENTATION -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://evergreen/skin/evergreen.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window SYSTEM "chrome://evergreen/locale/lang.dtd">

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="chrome://evergreen/content/OpenILS/util_overlay.xul"?>
<?xul-overlay href="chrome://evergreen/content/legacy/browse_list_overlay.xul"?>

<window id="browse_list_win"
	orient="vertical" style="overflow: scroll" 
	onload="try { my_pre_init(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
	<script type="text/javascript">var myPackageDir = 'evergreen'; var IAMXUL = true; var g = {};</script>
	<scripts id="openils_util_scripts"/>
	<script type="text/javascript" src="chrome://evergreen/content/main/JSAN.js"/>
	<script type="text/javascript">
	<![CDATA[

		var parentWindow = {};
		var params = {};
		var mw = {};
		var find_this_id;

		var org_shortname2id = {};
		var my_treerow;
		var browse_meter_per = 0;
		var orgs_with_copies = [];
		var orgs_with_copies_hash = {};

		function my_pre_init() {
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		                if (typeof JSAN == 'undefined') { throw( "The JSAN library object is missing."); }
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('..');
				JSAN.use('util.error'); g.error = new util.error();
				g.error.sdump('D_TRACE','my_pre_init() for legacy/_browse.xul');

				mw.G = {};
				mw.G.main_test_variable = 'Hello World';
				g.cgi = new CGI();
				g.session = g.cgi.param('session');
				mw.G.auth_ses = [ g.session ];
				mw.sdump = function(a,b) { g.error.sdump(a,b); }

				find_this_id = g.cgi.param('docid');

				JSAN.use('util.network');
				g.network = new util.network();

				JSAN.use('OpenILS.data');
				g.data = new OpenILS.data(); g.data.init({'via':'stash'});
				mw.G.my_orgs = g.data.list.my_aou;
				mw.G.my_orgs_hash = g.data.hash.my_aou;
				mw.G.org_tree = g.data.tree.aou;
				mw.G.user_ou = g.data.hash.aou[ g.data.list.au[0].home_ou() ];
				mw.G.aout_list = g.data.list.aout;
				mw.G.aout_hash = g.data.hash.aout;
				mw.G.ccs_list = g.data.list.ccs;
				mw.G.ccs_hash = g.data.hash.ccs;

				var x = document.getElementById('cmd_copy_edit');
				x.setAttribute('oncommand','try{spawn_copy_editor();}catch(E){alert(E);}');

				x = document.getElementById('cmd_copy_add');
				x.setAttribute('oncommand','try{spawn_copy_add_wizard();}catch(E){alert(E);}');

				x = document.getElementById('cmd_volume_edit');
				x.setAttribute('oncommand','try{spawn_volume_editor();}catch(E){alert(E);}');

				x = document.getElementById('cmd_volume_add');
				x.setAttribute('oncommand','try{spawn_volume_add_wizard();}catch(E){alert(E);}');

				x = document.getElementById('browse_list_tree');
				x.setAttribute('seltype','multiple');

				my_init();
	
			} catch(E) {
				var err_msg = "!! This software has encountered an error.  Please tell your friendly " +
					"system administrator or software developer the following:\nlegacy/_browse.xul\n" + E + '\n';
				try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
				alert(err_msg);
			}
		}

		function timer_init() {
			return '';
		}

		function timer_elapsed() {
			return '';
		}

		function handle_error(err) {
			try { alert(js2JSON(err)); } catch(E) { alert(err); }
		}

		function user_request(a,b,c,d) {
			return [ g.network.request(a,b,c,d) ];
		}

		function user_async_request(a,b,c,d) {
			return [ g.network.request(a,b,c,d) ];
		}

		var counter = {};

		function counter_init(id) {
			counter[id] = 0;
		}

		function counter_incr(id) {
			if (! counter[id]) { counter_init(id); }
			return ++counter[id];
		}

		function counter_peek(id) {
			if (! counter[id]) { return 0; }
			return counter[id];
		}

		function disable_widgets() {
			var d = document; var idx = 0;
			if (arguments[0].nodeName == '#document') {
				idx = 1; d = arguments[0];
			}
			for (var i = idx; i < arguments.length; i++) {
				if (typeof(arguments[i]) == 'object') {
					arguments[i].disabled = true;
				} else {
					var w = d.getElementById( arguments[i] );
					if (w) { 
						w.disabled = true; 
					}
				}
			}
		}

		function enable_widgets() {
			var d = document; var idx = 0;
			if (arguments[0].nodeName == '#document') {
				idx = 1; d = arguments[0];
			}
			for (var i = idx; i < arguments.length; i++) {
				if (typeof(arguments[i]) == 'object') {
					arguments[i].disabled = false;
				} else {
					var w = d.getElementById( arguments[i] );
					if (w) { 
						w.disabled = false; 
					}
				}
			}
		}

		function find_ou(tree,id) {
			if (typeof(id)=='object') { id = id.id(); }
			if (tree.id()==id) {
				return tree;
			}
			for (var i in tree.children()) {
				var child = tree.children()[i];
				ou = find_ou( child, id );
				if (ou) { return ou; }
			}
			return null;
		}

		function yesno(value) {
			switch(value) {
				case true: case 'true': case '1': case 'on':
					return 'Yes';
				default: 
					return 'No';
			}
		}

		function empty_widget() {
			var d; var e;
			if (arguments.length == 1) {
				e = arguments[0];
			} else {
				d = arguments[0];
				e = arguments[1];
				if (typeof(e) != 'object') { e = d.getElementById(e); }
			}
			if (typeof(e) != 'object') { dump('Failed on empty_widget\n'); return null; }
			while (e.lastChild) { e.removeChild(e.lastChild); }
		}

		function get_list_from_tree_selection() {
			var d = document; var tree_w;
			if (arguments.length == 1) {
				tree_w = arguments[0];
			} else {
				d = arguments[0];
				tree_w = arguments[1];
			}
			var hitlist;
			if (typeof(tree_w) != 'object') {
				hitlist = d.getElementById(tree_w);
			} else {
				hitlist = tree_w;
			}
			var list = [];
			var start = new Object();
			var end = new Object();
			var numRanges = hitlist.view.selection.getRangeCount();
			for (var t=0; t<numRanges; t++){
				hitlist.view.selection.getRangeAt(t,start,end);
				for (var v=start.value; v<=end.value; v++){
					var i = hitlist.contentView.getItemAtIndex(v);
					//sdump('D_WIDGETS',i.tagName + '\n');
					list.push( i );
				}
			}
			return list;
		}

		function filter_list(list,f) {
			var new_list = [];
			for (var i in list) {
				var t = f( list[i] );
				if (t) new_list.push( list[i] );
			}
			return new_list;
		}

		function cycle_attribute() {
			var d; var e; var a; var v;
			if (arguments.length == 3) {
				e = arguments[0];
				a = arguments[1];
				v = arguments[2];
			} else {
				d = arguments[0];
				e = arguments[1];
				a = arguments[2];
				v = arguments[3];
				if (typeof(e) != 'object') { e = d.getElementById(e); }
			}
			try {
				if (typeof(e) != 'object') { throw('typeof e != object : typeof e = ' + typeof(e)); }
				if (!a) { throw('!a : a = ' + a); }
				if (! e.getAttribute(a) ) { throw(' ! e.getAttribute(a) : a = ' + a); }
				if (typeof(v) != 'object') { throw('typeof v != object : typeof v = ' + typeof(v)); }

				var toggle = e.getAttribute(a);
				var next_one = false;
				for (var i = 0; i < v.length; i++) {
					if (next_one) {
						e.setAttribute(a,v[i]);
						return v[i];
					}
					if (toggle == v[i]) {
						next_one = true;
					}
				}
				if (next_one) {
					e.setAttribute(a,v[0]);
					return v[0];
				} else {
					throw('current value not in list');
				}
			} catch(E) {
				return null;
			}
		}


		function mapChrome(chrome) {
			switch(chrome) {
				case 'chrome://evergreen/content/cat/volume_copy_add_wizard.xul':
					return 'chrome://evergreen/content/legacy/_volume_copy_add_wizard.xul'; break;
				case 'chrome://evergreen/content/cat/copy_add_wizard.xul':
					return 'chrome://evergreen/content/legacy/_copy_add_wizard.xul'; break;
				case 'chrome://evergreen/content/cat/volume_edit_wizard.xul':
					return 'chrome://evergreen/content/legacy/_volume_edit_wizard.xul'; break;
			}
			return '';
		}

		parentWindow.new_tab = function() { };

		parentWindow.replace_tab = function(a,b,c) {
			if (window.xulG && typeof window.xulG.new_tab == 'function') {
				try {
					var f = window.xulG.new_tab( mapChrome(c), { 'tab_name' : b }, {} );
					return f.contentWindow;
				} catch(E) {
					alert(E);
				}
			}
		}

		mw.new_window = function(a,b,c) {
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			JSAN.use('util.window'); var win = new util.window();
			return win.open( mapChrome(a), b, c );
		}

		function spawn_copy_editor() {

			JSAN.use('util.widgets'); JSAN.use('util.functional');

			var list = util.widgets.get_list_from_tree_selection('browse_list_tree');
			list = util.functional.filter_list(
				list,
				function (obj) {
					return obj.getAttribute('object_type') == 'copy';
				}
			);

			var edit = 0;
			try {
				edit = g.network.request(
					api.PERM_MULTI_ORG_CHECK.app,
					api.PERM_MULTI_ORG_CHECK.method,
					[ 
						g.session, 
						g.data.list.au[0].id(), 
						util.functional.map_list(
							list,
							function (obj) {
								return obj.getAttribute('ou_id');
							}
						),
						[ 'UPDATE_COPY', 'UPDATE_BATCH_COPY' ]
					]
				).length == 0 ? 1 : 0;
			} catch(E) {
				g.error.sdump('batch permission check: ' + E);
			}

			list = util.functional.map_list(
				list,
				function (obj) {
					return obj.getAttribute('copy_id');
				}
			);

			JSAN.use('util.window'); var win = new util.window();
			var w = win.open(
				window.xulG.url_prefix(urls.XUL_COPY_EDITOR)
					+'?session='+window.escape(g.session)
					+'&copy_ids='+window.escape(js2JSON(list))
					+'&edit='+edit,
				'Copies',
				'chrome,modal,resizable'
			);
			/* FIXME -- need to unique the temp space, and not rely on modalness of window */
			g.data.stash_retrieve();
			var copies = JSON2js( g.data.temp );
			g.error.sdump('D_CAT','in browse, g.data.temp =\n' + g.data.temp);
			if (edit=='1') {
				try {
					var r = g.network.request(
						api.FM_ACP_FLESHED_BATCH_UPDATE.app,
						api.FM_ACP_FLESHED_BATCH_UPDATE.method,
						[ g.session, copies ]
					);
					/* FIXME -- revisit the return value here */
				} catch(E) {
					alert('copy update error: ' + js2JSON(E));
				}
				refresh_browse_list();
			}
		}

		function spawn_volume_editor() {
			/* <command id="cmd_volume_edit" oncommand="volume_edit(false,{ 'tree' : 'browse_list_tree', 'refresh_func' : refresh_browse_list });"/> */
			JSAN.use('util.widgets'); JSAN.use('util.functional');
			var list = util.widgets.get_list_from_tree_selection('browse_list_tree');
			list = util.functional.filter_list(
				list,
				function (obj) {
					return obj.getAttribute('object_type') == 'volume';
				}
			);
			list = util.functional.map_list(
				list,
				function (obj) {
					return obj.getAttribute('volume_id');
				}
			);

			alert('spawn volume editor with volume_ids = ' + js2JSON(list));
		}

		function spawn_volume_add_wizard() {
			/* <command id="cmd_volume_add" oncommand="volume_add(false,{ 'tree' : 'browse_list_tree', 'refresh_func' : refresh_browse_list });"/> */
			JSAN.use('util.widgets'); JSAN.use('util.functional');
			var list = util.widgets.get_list_from_tree_selection('browse_list_tree');
			list = util.functional.filter_list(
				list,
				function (obj) {
					return obj.getAttribute('object_type') == 'org_unit';
				}
			);
			list = util.functional.map_list(
				list,
				function (obj) {
					return obj.getAttribute('ou_id');
				}
			);


			alert('spawn volume add wizard with ou_ids = ' + js2JSON(list) );
		}

		function spawn_copy_add_wizard() {
			/* <command id="cmd_copy_add" oncommand="copy_add(false,{ 'tree' : 'browse_list_tree', 'refresh_func' : refresh_browse_list });"/> */
			JSAN.use('util.widgets'); JSAN.use('util.functional');
			var list = util.widgets.get_list_from_tree_selection('browse_list_tree');
			list = util.functional.filter_list(
				list,
				function (obj) {
					return obj.getAttribute('object_type') == 'volume';
				}
			);
			list = util.functional.map_list(
				list,
				function (obj) {
					return obj.getAttribute('volume_id');
				}
			);


			alert('spawn copy add wizard with volume_ids = ' + js2JSON(list));
		}
	]]>
	</script>

	<!-- The logic for this app -->
	<Evergreen id="browse_list_js" />

	<!-- XUL'ified abstraction for logic to attach to widgets -->
	<commandset id="browse_list_cmds" />

	<!-- Accelerator Keys (Accessor Keys are in DTD's) -->
	<keyset id="browse_list_keys" />

	<!-- Context menus -->
	<popupset id="browse_list_popupset" />

	<!-- Layout to be filled in by overlays and javascript -->
	<groupbox flex="1">
		<caption label="Copy Browser"/>
		<vbox id="browse_list_vbox" class="test_class"/>
	</groupbox>

</window>

