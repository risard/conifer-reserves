<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Example Template for remote xul -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
	<!--#include virtual="/opac/locale/en-US/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="admin_transit_list_win" 
	onload="try { my_init(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
        <script type="text/javascript">
		var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};
	</script>
        <scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="/xul/server/main/JSAN.js"/>
	<script>
	<![CDATA[
		function my_init() {
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		                if (typeof JSAN == 'undefined') { throw( "The JSAN library object is missing."); }
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('/xul/server/');
				JSAN.use('util.error'); g.error = new util.error();
				g.error.sdump('D_TRACE','my_init() for admin_transit_list.xul');

				JSAN.use('circ.util'); var columns = circ.util.transit_columns({}).concat( circ.util.hold_columns({}) );

				JSAN.use('util.list'); 
				g.list = new util.list('transit_from');
				g.list.init( 
					{ 
						'columns' : columns, 
						'map_row_to_column' : circ.util.std_map_row_to_column(), 
						'retrieve_row' : function(params) {
							var row = params.row;
							try {
								get_transit(
									row.my.transit_id,
									0,
									function(transit,hold) {
										row.my.atc = transit;
										if (hold) row.my.ahr = hold;
										if (typeof params.on_retrieve == 'function') {
											params.on_retrieve(row);
										}
									}
								);
							} catch(E) {
								try { g.error.standard_unexpected_error_alert('retrieving row',E); } catch(F) { alert(E); }
							}
						},
					}
				);
				g.list2 = new util.list('transit_to');
				g.list2.init( 
					{ 
						'columns' : columns, 
						'map_row_to_column' : circ.util.std_map_row_to_column(), 
						'retrieve_row' : function(params) {
							var row = params.row;
							try {
								get_transit(
									row.my.transit_id,
									1,
									function(transit,hold) {
										row.my.atc = transit;
										if (hold) row.my.ahr = hold;
										if (typeof params.on_retrieve == 'function') {
											params.on_retrieve(row);
										}
									}
								);
							} catch(E) {
								try { g.error.standard_unexpected_error_alert('retrieving row',E); } catch(F) { alert(E); }
							}
						},
					}
				);

				JSAN.use('util.network'); g.network = new util.network();
				JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.stash_retrieve();


				function get_transit(transit_id,which_list,do_this) {
					g.network.simple_request('FM_ATC_RETRIEVE', [ ses(), transit_id ],
						function(req2) {
							try {
								var robj2 = req2.getResultObject();
								if (typeof robj2.ilsevent != 'undefined') throw(robj2);

								if (instanceOf(robj2,atc)) {
									do_this(robj2,null);
								} else if (instanceOf(robj2,ahtc)) {
									g.network.simple_request('FM_AHR_RETRIEVE', [ ses(), robj2.hold() ],
										function(req3) {
											try {
												var robj3 = req3.getResultObject();
												if (typeof robj3.ilsevent != 'undefined') throw(robj3);
												if (instanceOf(robj3[0],ahr)) {
													do_this(robj2,robj3[0]);
												} else {
													throw(robj3);
												}
											} catch(E) {
												try { g.error.standard_unexpected_error_alert('retrieving hold id = ' + robj2.hold() + ' for transit id = ' + transit_id,E); } catch(F) { alert(E); }
											}
										}
									);
								} else {
									throw(robj2);
								}

							} catch(E) {
								try { g.error.standard_unexpected_error_alert('retrieving transit id = ' + transit_id,E); } catch(F) { alert(E); }
							}
						}
					);
				}

				g.network.simple_request('FM_ATC_RETRIEVE_VIA_AOU',[ ses(), g.data.list.au[ 0 ].ws_ou() ], 
					function(req) {
						try {
							var robj = req.getResultObject();
							if (typeof robj.ilsevent != 'undefined') throw(robj);

							JSAN.use('util.exec'); 
							var exec = new util.exec(2);
							var exec2 = new util.exec(2);

							function gen_list_append(id,which_list) {
								return function() {
									switch(which_list) {
										case 0: g.list.append( { 'row' : { 'my' : { 'transit_id' : id } } } ); break;
										case 1: g.list2.append( { 'row' : { 'my' : { 'transit_id' : id } } } ); break;
									}
								};
							}

							var rows = []; var rows2 = [];

							for (var i = 0; i < robj.from.length; i++) {
								//get_transit(robj.from[i], 0);
								rows.push( gen_list_append(robj.from[i],0) );
							}

							for (var i = 0; i < robj.to.length; i++) {
								//get_transit(robj.to[i], 1);
								rows2.push( gen_list_append(robj.to[i],1) );
							}
					
							exec.chain( rows );
							exec2.chain( rows2 );

						} catch(E) {
							try { g.error.standard_unexpected_error_alert('retrieving transits',E); } catch(F) { alert(E); }
						}
					}
				);
	
			} catch(E) {
				try { g.error.standard_unexpected_error_alert('admin/transit_list.xul',E); } catch(F) { alert(E); }
			}
		}

	]]>
	</script>

	<vbox flex="1" class="my_overflow">
		<groupbox flex="1">
			<caption label="Outgoing Transits" class="shrinkable_groupbox"/>
			<tree id="transit_from" flex="1" enableColumnDrag="true"/>
		</groupbox>
		<splitter><grippy/></splitter>
		<groupbox flex="1">
			<caption label="Incoming Transits" class="shrinkable_groupbox"/>
			<tree id="transit_to" flex="1" enableColumnDrag="true"/>
		</groupbox>
	</vbox>

</window>

