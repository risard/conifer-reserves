<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Patron Display -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/circ.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
	<!--#include virtual="/opac/locale/en-US/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>
<?xul-overlay href="/xul/server/patron/bill_summary_overlay.xul"?>

<window id="bill_details_win" width="700" height="550"
	onload="try{ my_init(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
        <script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
        <scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="/xul/server/main/JSAN.js"/>
	<script>
	<![CDATA[

		function $(id) { return document.getElementById(id); }

		function retrieve_mbts() {
			g.network.simple_request('FM_MBTS_RETRIEVE',[g.session,g.mbts_id],
				function(req) {
					try {
						g.mbts = req.getResultObject();
						$('mbts_id').value = g.mbts.id();
						$('mbts_xact_type').value = g.mbts.xact_type();
						$('mbts_xact_start').value = g.mbts.xact_start().toString().substr(0,19);
						$('mbts_xact_finish').value = g.mbts.xact_finish() ? g.mbts.xact_finish().toString().substr(0,19) : '';
						$('mbts_total_owed').value = g.mbts.total_owed() ? util.money.sanitize( g.mbts.total_owed() ) : '';
						$('mbts_total_paid').value = g.mbts.total_paid() ? util.money.sanitize( g.mbts.total_paid() ) : '';
						$('mbts_balance_owed').value = g.mbts.balance_owed() ? util.money.sanitize( g.mbts.balance_owed() ) : '';
					} catch(E) {
						g.error.sdump('D_ERROR',E);
					}
				}
			);
		}

		function retrieve_circ() {
			JSAN.use('util.widgets');
			g.network.simple_request('FM_CIRC_RETRIEVE_VIA_ID', [ g.session, g.mbts_id ],
				function (req) {
					var r_circ = req.getResultObject();
					if (instanceOf(r_circ,circ)) {

						$('title_label').hidden = false;
						$('checked_out_label').hidden = false;
						$('due_label').hidden = false;
						$('checked_in_label').hidden = false;
						$('checked_out').value = r_circ.xact_start() ? r_circ.xact_start().toString().substr(0,10) : '';
						$('checked_in').value = r_circ.checkin_time() ? r_circ.checkin_time().toString().substr(0,10) : '';
						$('due').value = r_circ.due_date() ? r_circ.due_date().toString().substr(0,10) : '';

						g.network.simple_request(
							'MODS_SLIM_RECORD_RETRIEVE_VIA_COPY',
							[ r_circ.target_copy() ],
							function (rreq) {
								var r_mvr = rreq.getResultObject();
								if (instanceOf(r_mvr,mvr)) {
									util.widgets.remove_children('title');
									$('title').appendChild( document.createTextNode( r_mvr.title() ) );
								} else {
									obj.network.simple_request(
										'FM_ACP_RETRIEVE',
										[ r_circ.target_copy() ],
										function (rrreq) {
											var r_acp = rrreq.getResultObject();
											if (instanceOf(r_acp,acp)) {
												util.widgets.remove_children('title');
												$('title').appendChild( document.createTextNode( r_acp.dummy_title() ) );
											}
										}
									);
								}
							}
						);

					}
				}
			);
		}

		function init_lists() {
			JSAN.use('util.list'); 
			g.bill_list = new util.list('bill_tree');
			g.payment_list = new util.list('payment_tree');

			g.bill_list.init( {
				'columns' : patron.util.mb_columns({}),
				'map_row_to_column' : patron.util.std_map_row_to_column(),
				'on_select' : function(ev) {
					JSAN.use('util.functional');
					g.bill_list_selection = util.functional.map_list(
						g.bill_list.retrieve_selection(),
						function(o) { return o.getAttribute('retrieve_id'); }
					);
					$('void').disabled = g.bill_list_selection.length == 0;
				},
			} );

			g.payment_list.init( {
				'columns' : patron.util.mp_columns({}),
				'map_row_to_column' : patron.util.std_map_row_to_column(),
				'on_select' : function(ev) {
					JSAN.use('util.functional');
					g.payment_list_selection = util.functional.map_list(
						g.payment_list.retrieve_selection(),
						function(o) { return o.getAttribute('retrieve_id'); }
					);
					$('refund').disabled = g.payment_list_selection.length == 0;
				},
			} );
		}

		function retrieve_mb() {
			var mb_list = g.network.simple_request( 'FM_MB_RETRIEVE_VIA_MBTS_ID', [ g.session, g.mbts_id ] );

			var mb_funcs = [];

			function gen_mb_func(r) {
				return function() {
					g.bill_list.append( { 'retrieve_id' : r.id(), 'row' : { my : { 'mb' : r } } } );
				}
			}

			for (var i = 0; i < mb_list.length; i++) {
				mb_funcs.push( gen_mb_func(mb_list[i]) );
			}

			JSAN.use('util.exec');
			var mb_exec = new util.exec(4); mb_exec.chain(mb_funcs);
		}

		function retrieve_mp() {
			var mp_list = g.network.simple_request( 'FM_MP_RETRIEVE_VIA_MBTS_ID', [ g.session, g.mbts_id ]);

			var mp_funcs = [];

			function gen_mp_func(r) {
				return function() {
					g.payment_list.append( { 'retrieve_id' : r.id(), 'row' : { my : { 'mp' : r } } } );
				}
			}

			for (var i = 0; i < mp_list.length; i++) {
				mp_funcs.push( gen_mp_func(mp_list[i]) );
			}

			JSAN.use('util.exec');
			var mp_exec = new util.exec(4); mp_exec.chain(mp_funcs);
		}

		function my_init() {
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		                if (typeof JSAN == 'undefined') { throw( "The JSAN library object is missing."); }
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('/xul/server/');

				JSAN.use('util.error'); g.error = new util.error();
				JSAN.use('util.network'); g.network = new util.network();
				JSAN.use('util.date');
				JSAN.use('util.money');
				JSAN.use('patron.util');
				JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});
				g.data.temp = ''; g.data.stash('temp');

				g.error.sdump('D_TRACE','my_init() for bill_details.xul');

				g.cgi = new CGI();

				g.mbts_id = g.cgi.param('mbts_id');
				g.session = g.cgi.param('session');

				retrieve_mbts();
				retrieve_circ();

				init_lists();

				retrieve_mb();
				retrieve_mp();

				$('void').addEventListener(
					'command',
					handle_void,
					false
				);

				$('refund').addEventListener(
					'command',
					handle_refund,
					false
				);

	
			} catch(E) {
				var err_msg = "!! This software has encountered an error.  Please tell your friendly " +
					"system administrator or software developer the following:\nbill_details.xul\n" + E + '\n';
				try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
				alert(err_msg);
			}
		}

		function handle_void() {
			var msg = 'Are you sure you would like to void bill' + ( g.bill_list_selection.length > 1 ? 's ' : ' ') + g.bill_list_selection + '?';
			var r = g.error.yns_alert(msg,'Voiding Bills','Yes','No',null,'Check here to confirm this message');
			if (r == 0) {
				for (var i = 0; i < g.bill_list_selection.length; i++) {
					var robj = g.network.simple_request('FM_MB_VOID',[g.session,g.bill_list_selection[i]]);
					if (robj.ilsevent) {
						switch(robj.ilsevent) {
							case -1 : g.error.standard_network_error_alert('Void of Bill #' + g.bill_list_selection[i] + ' failed.'); break;
							default: g.error.standard_unexpected_error_alert('Void of Bill #' + g.bill_list_selection[i] + ' failed.',robj); break;
						}
					}
				}
				retrieve_mbts();
				g.bill_list.clear();
				retrieve_mb();
				g.data.temp = 'refresh'; g.data.stash('temp');
			}
		}

		function handle_refund() {
			alert('Not Yet Implemented');
		}
	]]>
	</script>

	<vbox flex="1" class="my_overflow">
		<groupbox orient="vertical" flex="1">
			<caption label="Full Details"/>

			<groupbox orient="vertical" flex="1" id="summary" />

			<splitter><grippy/></splitter>

			<groupbox orient="vertical" flex="1">
				<caption label="Bills" style="color: red"/>
				<tree id="bill_tree" flex="1" enableColumnDrag="true"/>
				<hbox><spacer flex="1"/><button id="void" label="Void selected billings" disabled="true"/></hbox>
			</groupbox>

			<splitter><grippy/></splitter>

			<groupbox orient="vertical" flex="1">
				<caption label="Payments" style="color: green"/>
				<tree id="payment_tree" flex="1" enableColumnDrag="true"/>
				<hbox><spacer flex="1"/><button id="refund" label="Refund selected payments" disabled="true"/></hbox>
			</groupbox>

		</groupbox>
		<hbox>
			<button id="opac" label="Show in Catalog" accesskey="S" hidden="true"/>
			<spacer flex="1"/>
			<button label="Close Window" oncommand="window.close()" accesskey="c"/>
		</hbox>
	</vbox>


</window>

