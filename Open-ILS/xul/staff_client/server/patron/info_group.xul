<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Patron Display -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/global.css" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/patron_display.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
	<!--#include virtual="/opac/locale/en-US/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="patron_info_group_win" width="700" height="550"
	onload="try{ my_init(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
        <script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
        <scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="/xul/server/main/JSAN.js"/>
	<script>
	<![CDATA[

		function $(id) { return document.getElementById(id); }

		function my_init() {
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		                if (typeof JSAN == 'undefined') { throw( "The JSAN library object is missing."); }
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('/xul/server/');

				JSAN.use('util.error'); g.error = new util.error();
				JSAN.use('util.network'); g.network = new util.network();
				JSAN.use('util.date'); JSAN.use('util.money'); JSAN.use('patron.util'); JSAN.use('util.functional');
				JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});

				g.error.sdump('D_TRACE','my_init() for patron_info_group.xul');

				g.cgi = new CGI();
				g.patron_id = g.cgi.param('patron_id');

				tree_init();

				refresh();

			} catch(E) {
				var err_msg = "!! This software has encountered an error.  Please tell your friendly " +
					"system administrator or software developer the following:\npatron_info_group.xul\n" + E + '\n';
				try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); }
				alert(err_msg);
			}
		}

		function tree_init() {
				JSAN.use('OpenILS.data'); g.OpenILS = {}; 
				g.OpenILS.data = new OpenILS.data(); g.OpenILS.data.init({'via':'stash'});

				JSAN.use('util.list'); g.list = new util.list('patron_list');
				function getString(s) { return g.OpenILS.data.entities[s]; }

				JSAN.use('patron.util');
				var columns = patron.util.columns(
					{
						'active' : { 'hidden' : 'false' },
						'barred' : { 'hidden' : 'false' },
						'family_name' : { 'hidden' : 'false' },
						'first_given_name' : { 'hidden' : 'false' },
						'second_given_name' : { 'hidden' : 'false' },
						'dob' : { 'hidden' : 'false' },
					}
				);
				g.list.init(
					{
						'columns' : columns,
						'map_row_to_column' : patron.util.std_map_row_to_column(),
						'retrieve_row' : function(params) {
							var id = params.retrieve_id;
							var au_obj = patron.util.retrieve_au_via_id( ses(), id );

							var row = params.row;
							if (typeof row.my == 'undefined') row.my = {};
							row.my.au = au_obj;
							if (typeof params.on_retrieve == 'function') {
								params.on_retrieve(row);
							}
							return row;
						},
						'on_select' : function(ev) {
							JSAN.use('util.functional');
							var sel = g.list.retrieve_selection();
							g.sel_list = util.functional.map_list(
								sel,
								function(o) { return o.getAttribute('retrieve_id'); }
							);
						}
					}
				);
		}

		function refresh() {
			retrieve_group_members();
		}

		function retrieve_group_members() {
			try {
				JSAN.use('util.functional'); JSAN.use('patron.util');
				g.group_members = [];
				var p = patron.util.retrieve_au_via_id(ses(),g.patron_id);
				if ((p == null) || (typeof p.ilsevent != 'undefined') ) throw(p);
				var robj = g.network.simple_request(
					'FM_AU_LIST_RETRIEVE_VIA_GROUP',
					[ ses(), p.usrgroup() ]
				);
				if ((robj == null) || (typeof robj.ilsevent != 'undefined') ) throw(robj);
				var ids = util.functional.filter_list( robj, function(o) { return o != g.patron_id; });

				g.list.clear();

				var funcs = [];

					function gen_func(r) {
						return function() {
							g.list.append( { 'retrieve_id' : r, 'row' : {} } );
						}
					}

				for (var i = 0; i < ids.length; i++) {
					funcs.push( gen_func(ids[i]) );
				}
				JSAN.use('util.exec'); var exec = new util.exec(4);
				exec.chain( funcs );

			} catch(E) {
				g.error.standard_unexpected_error_alert('Failed to retrieve all the group members.',E);
			}
		}

		function retrieve_patron() {
			try {
					if (typeof window.xulG == 'object' && typeof window.xulG.new_tab == 'function') {
						for (var i = 0; i < g.sel_list.length; i++) {	
							try {
								var url = urls.XUL_PATRON_DISPLAY 
									+ '?id=' + window.escape( g.sel_list[i] );
								window.xulG.new_tab(
									url, { 'tab_name' : 'Retrieving Patron..' }, {}
								);
							} catch(E) {
								g.error.standard_unexpected_error_alert('Failed to retrieve patron.',E);
							}
						}
					}
			} catch(E) {
				g.error.standard_unexpected_error_alert('Failed to retrieve patrons.',E);
			}
		}

		function clone_patron() {
			var loc = xulG.url_prefix( urls.XUL_REMOTE_BROWSER ) 
				+ '?url=' + window.escape( urls.XUL_PATRON_EDIT + '?ses=' + window.escape( ses() ) + '&clone=' + g.patron_id );
			xulG.new_tab(
				loc, 
				{}, 
				{ 
					'show_print_button' : true , 
					'tab_name' : 'Register Patron Clone for Group' ,
					'passthru_content_params' : {
						'spawn_search' : spawn_search,
						'spawn_editor' : spawn_editor,
						'on_save' : function() { refresh(); },
						'url_prefix' : xulG.url_prefix,
						'new_tab' : xulG.new_tab,
					},
					'url_prefix' : xulG.url_prefix,
					'new_tab' : xulG.new_tab,
				}
			);
		}

		function spawn_editor(p) {
			var url = urls.XUL_PATRON_EDIT;
			var param_count = 0;
			for (var i in p) {
				if (param_count++ == 0) url += '?'; else url += '&';
				url += i + '=' + window.escape(p[i]);
			}
			var loc = xulG.url_prefix( urls.XUL_REMOTE_BROWSER ) + '?url=' + window.escape( url );
			xulG.new_tab(
				loc, 
				{}, 
				{ 
					'show_print_button' : true , 
					'tab_name' : 'Editing Related Patron' ,
					'passthru_content_params' : {
						'spawn_search' : spawn_search,
						'spawn_editor' : spawn_editor,
						'on_save' : function() { refresh(); },
						'url_prefix' : xulG.url_prefix,
						'new_tab' : xulG.new_tab,
					},
					'url_prefix' : xulG.url_prefix,
					'new_tab' : xulG.new_tab,
				}
			);

		}

		function spawn_search(s) {
			try {
				g.error.sdump('D_TRACE', 'Editor would like to search for: ' + js2JSON(s) ); 
				var loc = xulG.url_prefix(urls.XUL_PATRON_DISPLAY);
					loc += '?doit=1&query=' + window.escape(js2JSON(s));
				xulG.new_tab( loc, {}, {} );
			} catch(E) {
				g.error.standard_unexpected_error_dialog('spawn search',E);
			}
		}

	]]>
	</script>

	<vbox flex="1" class="my_overflow" id="group_panel">
		<groupbox>
			<caption label="Group Actions"/>
			<menulist id="ml">
				<menupopup>
					<menuitem label="Choose an action..." value="0"/>
					<menuitem label="Register a new Group Member by Cloning this Patron" oncommand="try{clone_patron();}catch(E){alert('FIXME:'+E);}"/>
					<menuitem label="Remove this Patron from the Group" oncommand="try{remove_patron();}catch(E){alert('FIXME:'+E);}"/>
					<menuitem label="Link an existing Patron to this Group" oncommand="try{link_patron();}catch(E){alert('FIXME:'+E);}"/>	
				</menupopup>
			</menulist>
		</groupbox>
		<groupbox flex="1">
			<caption label="Group Members"/>
			<hbox>
				<spacer flex="1"/>
				<button label="Retrieve Selected Patrons" accesskey="P" oncommand="try{retrieve_patron();}catch(E){alert(E);}"/>
			</hbox>
			<tree id="patron_list" flex="1" enableColumnDrag="true" seltype="multiple"/>
		</groupbox>
	</vbox>


</window>

