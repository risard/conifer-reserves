<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Main, Authentication Window -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- PRESENTATION -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/global.css" type="text/css"?>
<?xml-stylesheet href="chrome://open_ils_staff_client/skin/auth.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window PUBLIC "" ""[
	<!--#include virtual="/opac/locale/en-US/lang.dtd"-->
]>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="gen_offline_menus_win" 
	onload="try { gen_offline_menus_init(); } catch(E) { alert(E); }"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
	<script type="text/javascript">var myPackageDir = 'open_ils_staff_client'; var IAMXUL = true; var g = {};</script>
	<scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="chrome://open_ils_staff_client/content/main/lang.js"/>
	<script type="text/javascript" src="/xul/server/main/lang.js"/>
	<script type="text/javascript" src="chrome://open_ils_staff_client/content/main/JSAN.js"/>
	<script>
	<![CDATA[

		function gen_offline_menus_init() {

			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");

			if (typeof JSAN == 'undefined') {
				throw(
					"The JSAN library object is missing."
				);
			}
			/////////////////////////////////////////////////////////////////////////////

			JSAN.errorLevel = "die"; // none, warn, or die
			JSAN.addRepository('/xul/server/');

			JSAN.use('util.error'); g.error = new util.error();
			JSAN.use('OpenILS.data'); g.data = new OpenILS.data(); g.data.init({'via':'stash'});
			JSAN.use('util.network'); g.network = new util.network();
			JSAN.use('util.functional');

			save_object('offline_ou_list', build_ou_list());

			save_object('offline_pgt_list', build_pgt_list());

			save_object('offline_cit_list', build_cit_list());

			save_object('offline_cnct_list', build_cnct_list());

			save_object('offline_asv_list', build_asv_list());

			$('placeholder').setAttribute('value','Offline interface synchronized with server.');

		}

		function $(id) {
			return document.getElementById(id);
		}

		function save_object(filename,obj) {
			netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
			JSAN.use('util.file'); var file = new util.file(filename);
			file.set_object(obj); file.close();
		}

		function build_ou_list() {
			return [
				util.functional.map_list( 
					g.data.list.aou,
					function(obj) { return [ 
						obj.name() ? obj.shortname() + ' : ' + obj.name() : obj.shortname(), 
						obj.id(), 
						( g.data.hash.aout[ obj.ou_type() ].can_have_users() == 0),
						( g.data.hash.aout[ obj.ou_type() ].depth() ),
					]; }
				),
				g.data.list.au[0].ws_ou()
			];
		}

		function build_pgt_list() {
			return [
				util.functional.map_list( 
					g.data.list.pgt,
					function(obj) { return [ 
						obj.description() ? obj.name() + ' : ' + obj.description() : obj.name(), 
						obj.id() 
					]; }
				)
			];
		}

		function build_cit_list() {
			return [
				util.functional.map_list( 
					g.data.list.cit,
					function(obj) { return [ 
						obj.name(), 
						obj.id() 
					]; }
				)
			];
		}

		function build_cnct_list() {
			return [
				util.functional.map_list( 
					g.data.list.cnct,
					function(obj) { return [ 
						obj.name(), 
						'[' + obj.id() + ',' + obj.circ_duration() + ']'
					]; }
				)
			];
		}

		function build_asv_list() {
			var obj = {};
			/* loop through required surveys */
			for (var i = 0; i < g.data.list.my_asv.length; i++) {
				dump('i = ' + i + '\n');
				var survey = g.data.list.my_asv[i];
				obj[ survey.name() ] = {};
				obj[ survey.name() ][ 'description' ] = survey.description();
				obj[ survey.name() ][ 'questions' ] = [];

				/* loop through survey questions */
				for (var j = 0; j < survey.questions().length; j++) {
					dump('\tj = ' + j + '\n');
					var question = survey.questions()[j];
					var q = {};
					q[ 'question' ] = question.question();
					q[ 'answers' ] = util.functional.map_list( 
						question.answers(),
						function(obj) { return [ 
							obj.answer(), 
							'[' + obj.id() + ',' 
							+ obj.question() + ',' 
							+ question.survey() + ']'
						]; }
					);
					obj[ survey.name() ][ 'questions' ].push( q );
				}
			}
			return obj;
		}

	]]>
	</script>

	<vbox flex="1">
		<label id="placeholder"/>
	</vbox>
</window>

