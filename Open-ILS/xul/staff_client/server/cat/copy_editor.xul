<?xml version="1.0"?>
<!-- Application: Evergreen Staff Client -->
<!-- Screen: Copy Viewer/Editor -->

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- STYLESHEETS -->
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="/xul/server/skin/evergreen.css" type="text/css"?>

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- LOCALIZATION -->
<!DOCTYPE window SYSTEM "chrome://evergreen/locale/lang.dtd">

<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
<!-- OVERLAYS -->
<?xul-overlay href="/xul/server/OpenILS/util_overlay.xul"?>

<window id="cat_copy_editor_win" 
	onload="try { my_init(); } catch(E) { alert(E); }"
	width="800" height="600"
	title="Copies"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

	<!-- ///////////////////////////////////////////////////////////////////////////////////////////////////////////// -->
	<!-- BEHAVIOR -->
        <script type="text/javascript">
		var myPackageDir = 'evergreen'; var IAMXUL = true; var g = {};
	</script>
        <scripts id="openils_util_scripts"/>

	<script type="text/javascript" src="/xul/server/main/JSAN.js"/>
	<script>
	<![CDATA[

		g.apply = function(field,value) {
			g.error.sdump('D_TRACE','field = ' + field + '  value = ' + value + '\n');
			for (var i = 0; i < g.copies.length; i++) {
				var copy = g.copies[i];
				try {
					copy[field]( value ); copy.ischanged('1');
				} catch(E) {
					alert(E);
				}
			}
		}

		g.special_exception = {
			'Call Number' : function(label,value) {
				g.network.request(
					api.FM_ACN_RETRIEVE.app,
					api.FM_ACN_RETRIEVE.method,
					[ value ],
					function(req) {
						var cn = '??? id = ' + value;
						try {
							cn = req.getResultObject().label();
						} catch(E) {
							g.error.sdump('D_ERROR','callnumber retrieve: ' + E);
						}
						label.setAttribute('value',cn);
					}
				);
			},
			'Creator' : function(label,value) {
				g.network.request(
					api.FM_AU_RETRIEVE_VIA_ID.app,
					api.FM_AU_RETRIEVE_VIA_ID.method,
					[ g.session, value ],
					function(req) {
						var p = '??? id = ' + value;
						try {
							p = req.getResultObject();
							p = p.card().barcode() + ' : ' + p.family_name();

						} catch(E) {
							g.error.sdump('D_ERROR','patron retrieve: ' + E);
						}
						label.setAttribute('value',p);
					}
				);
			},
			'Last Editor' : function(label,value) {
				g.network.request(
					api.FM_AU_RETRIEVE_VIA_ID.app,
					api.FM_AU_RETRIEVE_VIA_ID.method,
					[ g.session, value ],
					function(req) {
						var p = '??? id = ' + value;
						try {
							p = req.getResultObject();
							p = p.card().barcode() + ' : ' + p.family_name();

						} catch(E) {
							g.error.sdump('D_ERROR','patron retrieve: ' + E);
						}
						label.setAttribute('value',p);
					}
				);
			}

		}

		g.readonly_field_names = [
			[
				"Barcode",		 
				{
					render: 'fm.barcode();',
				}
			], 
			[
				"Call Number", 	
				{
					render: 'fm.call_number();',
				}
			],
		];
		g.editable_field_names = [
			 [
			 	"Circulate as Type",	
				{ 	
			 		render: 'fm.circ_as_type();',
			 		input: 'x = document.createElement("textbox"); x.addEventListener("change",function(ev) { g.apply("circ_as_type",ev.target.value); }, false);',
				} 
			],
			[
				"Circulation Library",		
				{ 	
			 		render: 'fm.circ_lib().shortname();',
			 		input: 'x = util.widgets.make_menulist( util.functional.map_list( util.functional.filter_list(data.list.my_aou, function(obj) { return data.hash.aout[ obj.ou_type() ].can_have_vols(); }), function(obj) { return [ obj.shortname(), obj.id() ]; }).sort() ); x.addEventListener("command",function(ev) { g.apply("circ_lib",ev.target.value); }, false);',
			 	} 
			],
			[
			 	"Circulation Modifier",
				{	
					render: 'fm.circ_modifier();',
					input: 'x = document.createElement("textbox"); x.addEventListener("change",function(ev) { g.apply("circ_modifier",ev.target.value); }, false);',
				}
			],
			[
			 	"Circulate?",
				{ 	
					render: 'fm.circulate() ? "Yes" : "No";',
					input: 'x = util.widgets.make_menulist( [ [ "Yes", "1" ], [ "No", "0" ] ] ); x.addEventListener("command",function(ev) { g.apply("circulate",ev.target.value); }, false);',
				}
			],
			[
			 	"Copy Number",
				{ 
					render: 'fm.copy_number();',
					input: 'x = document.createElement("textbox"); x.addEventListener("change",function(ev) { g.apply("copy_number",ev.target.value); }, false);',
				}
			],
			[
			 	"Creation Date",
				{ 
					render: 'util.date.formatted_date( fm.create_date(), "%F");',
				}
			],
			[
			 	"Creator",
				{ 
					render: 'fm.creator();',
	 			}
			],
			[
			 	"Deposit?",
				{ 
					render: 'fm.deposit() ? "Yes" : "No";',
					input: 'x = util.widgets.make_menulist( [ [ "Yes", "1" ], [ "No", "0" ] ] ); x.addEventListener("command",function(ev) { g.apply("deposit",ev.target.value); }, false);',
				}
			],
			[
			 	"Deposit Amount",
				{ 
					render: 'util.money.sanitize( fm.deposit_amount() );',
					input: 'x = document.createElement("textbox"); x.addEventListener("change",function(ev) { g.apply("deposit_amount",ev.target.value); }, false);',
				}
			],
			[
			 	"Last Edit Date",
				{ 
					render: 'util.date.formatted_date( fm.edit_date(), "%F");',
				}
			],
			[
			 	"Last Editor",
				{
					render: 'fm.editor();',
	 			}
			],
			[
			 	"Fine Level",
				{
					render: 'switch(fm.fine_level()){ case 1: "Low"; break; case 2: "Normal"; break; case 3: "High"; break; }',
					input: 'x = util.widgets.make_menulist( [ [ "Low", "1" ], [ "Normal", "2" ], [ "High", "3" ] ] ); x.addEventListener("command",function(ev) { g.apply("fine_level",ev.target.value); }, false);',
				}
			],
			[
			 	"Holdable?",
				{ 
					render: 'fm.holdable() ? "Yes" : "No";', 
					input: 'x = util.widgets.make_menulist( [ [ "Yes", "1" ], [ "No", "0" ] ] ); x.addEventListener("command",function(ev) { g.apply("holdable",ev.target.value); }, false);',
				}
			],
			[
			 	"Loan Duration",
				{ 
					render: 'switch(fm.loan_duration()){ case 1: "Short"; break; case 2: "Normal"; break; case 3: "Long"; break; }',
					input: 'x = util.widgets.make_menulist( [ [ "Short", "1" ], [ "Normal", "2" ], [ "Long", "3" ] ] ); x.addEventListener("command",function(ev) { g.apply("loan_duration",ev.target.value); }, false);',

				}
			],
			[
			 	"Shelving Location",
				{ 
					render: 'fm.location().name();', 
					input: 'x = util.widgets.make_menulist( util.functional.map_list( data.list.acpl, function(obj) { return [ obj.name(), obj.id() ]; }).sort()); x.addEventListener("command",function(ev) { g.apply("location",ev.target.value); }, false);',

				}
			],
			[
			 	"OPAC Visible?",
				{ 
					render: 'fm.opac_visible() ? "Yes" : "No";', 
					input: 'x = util.widgets.make_menulist( [ [ "Yes", "1" ], [ "No", "0" ] ] ); x.addEventListener("command",function(ev) { g.apply("opac_visible",ev.target.value); }, false);',
				}
			],
			[
			 	"Price",
				{ 
					render: 'util.money.sanitize( fm.price() );', 
					input: 'x = document.createElement("textbox"); x.addEventListener("change",function(ev) { g.apply("deposit_amount",ev.target.value); }, false);',
				}
			],
			[
			 	"Reference?",
				{ 
					render: 'fm.ref() ? "Yes" : "No";', 
					input: 'x = util.widgets.make_menulist( [ [ "Yes", "1" ], [ "No", "0" ] ] ); x.addEventListener("command",function(ev) { g.apply("ref",ev.target.value); }, false);',
				}
			],
			[
			 	"Status",
				{ 
					render: 'fm.status().name();', 
					input: 'x = util.widgets.make_menulist( util.functional.map_list( data.list.ccs, function(obj) { return [ obj.name(), obj.id() ]; } ).sort() ); x.addEventListener("command",function(ev) { g.apply("status",ev.target.value); }, false);',


				}
			],
		];

		function my_init() {
			try {
				netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
		                if (typeof JSAN == 'undefined') { throw( "The JSAN library object is missing."); }
				JSAN.errorLevel = "die"; // none, warn, or die
				JSAN.addRepository('/xul/server/');
				JSAN.use('util.error'); g.error = new util.error();
				g.error.sdump('D_TRACE','my_init() for cat/copy_editor.xul');

				g.cgi = new CGI();

				g.session = g.cgi.param('session') || g.cgi.param('ses');

				var copy_ids = [];
				if (g.cgi.param('copy_ids')) copy_ids = JSON2js( g.cgi.param('copy_ids') );
				if (!copy_ids) copy_ids = [];
				if (window.xulG && window.xulG.copy_ids) copy_ids = copy_ids.concat( window.xulG.copy_ids );

				if (g.cgi.param('edit') == '1') { 
					g.edit = true;
					document.getElementById('caption').setAttribute('label','Copy Editor'); 
					document.getElementById('nav').setAttribute('hidden','false'); 
				}

				JSAN.use('util.network'); g.network = new util.network();

				if (copy_ids.length > 0) g.copies = g.network.request(
					api.FM_ACP_FLESHED_BATCH_RETRIEVE.app,
					api.FM_ACP_FLESHED_BATCH_RETRIEVE.method,
					[ copy_ids ]
				);

				if (!g.copies) g.copies = [];
				if (window.xulG && window.xulG.copies) g.copies = g.copies.concat( window.xulG.copies );

				g.summarize( g.copies );
				g.render();

			} catch(E) {
				var err_msg = "!! This software has encountered an error.  Please tell your friendly " +
					"system administrator or software developer the following:\ncat/copy_editor.xul\n" + E + '\n';
				try { g.error.sdump('D_ERROR',err_msg); } catch(E) { dump(err_msg); dump(js2JSON(E)); }
				alert(err_msg);
			}
		}

		g.summarize = function( copies ) {
			JSAN.use('util.date'); JSAN.use('util.money');
			JSAN.use('OpenILS.data'); var data = new OpenILS.data(); data.init({'via':'stash'});
			g.summary = {};
			g.field_names = g.readonly_field_names.concat( g.editable_field_names );
			for (var i = 0; i < g.field_names.length; i++) {
				var field_name = g.field_names[i][0];
				var render = g.field_names[i][1].render;
				g.summary[ field_name ] = {};
				for (var j = 0; j < copies.length; j++) {
					var fm = copies[j];
					var cmd = render || ('fm.' + field_name + '();');
					g.error.sdump('D_TRACE',cmd + ' = ');
					var value = '???';
					try { value = eval( cmd ); } catch(E) { g.error.sdump('D_ERROR', E + '\n'); }
					g.error.sdump('D_TRACE',value + '\n');
					if (typeof value == 'object' && value != null) {
						g.error.sdump('D_ERROR','field_name = ' + field_name + '  value = ' + js2JSON(value) + '\n');
						/*
						try { value = value.id(); } catch(E) { 
							g.error.sdump('D_ERROR',E + '\n'); 
							try { 
								g.error.sdump('D_ERROR',js2JSON(value) + '\n'); 
							} catch(F) { 
								g.error.sdump('D_ERROR',F); 
							}
						}
						*/
					}
					if (g.summary[ field_name ][ value ]) {
						g.summary[ field_name ][ value ]++;
					} else {
						g.summary[ field_name ][ value ] = 1;
					}
				}
			}
			g.error.sdump('D_ERROR','summary = ' + js2JSON(g.summary) + '\n');
		}

		g.render = function() {

			JSAN.use('util.widgets'); JSAN.use('util.date'); JSAN.use('util.money'); JSAN.use('util.functional');
			JSAN.use('OpenILS.data'); var data = new OpenILS.data(); data.init({'via':'stash'});

			/* clear */
			var cns = document.getElementById('call_number_summary');
			util.widgets.remove_children( cns );
			var bcs = document.getElementById('barcode_summary');
			util.widgets.remove_children( bcs );
			var rp = document.getElementById('right_pane');
			util.widgets.remove_children( rp );

			var grid = util.widgets.make_grid( [ { 'flex' : '1' }, {} ] );
			cns.appendChild(grid);
			for (var i in g.summary['Call Number']) {
				var cn_id = i; var count = g.summary['Call Number'][i];
				var row = document.createElement('row'); grid.lastChild.appendChild(row);
				var cn_label = document.createElement('label'); row.appendChild(cn_label);
				g.special_exception['Call Number']( cn_label, cn_id );
				var count_label = document.createElement('label'); row.appendChild(count_label);
				count_label.setAttribute('value',count + ' copies');
			}

			for (var i in g.summary['Barcode']) {
				var bc = i;
				var hbox = document.createElement('hbox'); bcs.appendChild(hbox);
				var bc_label = document.createElement('label'); hbox.appendChild(bc_label);
				bc_label.setAttribute('value',bc);
			}

			
			for (var i = 0; i < g.editable_field_names.length; i++) {
				try {
					var f = g.editable_field_names[i]; var fn = f[0];
					var groupbox = document.createElement('groupbox'); rp.appendChild(groupbox);
					var caption = document.createElement('caption'); groupbox.appendChild(caption);
					caption.setAttribute('label',fn);
					var vbox = document.createElement('vbox'); groupbox.appendChild(vbox);
					var grid = util.widgets.make_grid( [ { 'flex' : 1 }, {} ] ); vbox.appendChild(grid);
					grid.setAttribute('flex','1');
					var rows = grid.lastChild;
					for (var j in g.summary[fn]) {
						var value = j; var count = g.summary[fn][j];
						var row = document.createElement('row'); rows.appendChild(row);
						var label1 = document.createElement('label'); row.appendChild(label1);
						if (g.special_exception[ fn ]) {
							g.special_exception[ fn ]( label1, value );
						} else {
							label1.setAttribute('value',value);
						}
						var label2 = document.createElement('label'); row.appendChild(label2);
						label2.setAttribute('value',count + ' copies');
					}
					var hbox = document.createElement('hbox'); vbox.appendChild(hbox);
					if (f[1].input && g.edit) {
						try {
							var spacer = document.createElement('spacer'); hbox.appendChild(spacer);
							spacer.setAttribute('flex','1');
							var x; eval( f[1].input );
							if (x) hbox.appendChild(x);

						} catch(E) {
							g.error.sdump('D_ERROR',E + '\n');
						}
					}
				} catch(E) {
					g.error.sdump('D_ERROR','copy editor: ' + E + '\n');
				}
			}
		}
	]]>
	</script>

	<groupbox flex="1" style="overflow: auto">
		<caption id="caption" label="Copy Viewer"/>
		<hbox id="nav" hidden="true">
			<spacer flex="1"/>
			<button id="save" label="Modify these Copies" 
				oncommand="alert('push these: ' + js2JSON(g.copies) );"/>
		</hbox>
		<hbox flex="1">
			<vbox style="overflow: scroll"> <!-- left pane -->
				<groupbox id="gb_callnumbers">
					<caption label="Call Numbers"/>
					<vbox id="call_number_summary" flex="1"/>
				</groupbox>
				<groupbox id="gb_barcodes">
					<caption label="Barcodes"/>
					<vbox id="barcode_summary" flex="1"/>
				</groupbox>
			</vbox>
			<splitter><grippy /></splitter>
			<vbox id="right_pane" style="overflow: scroll" flex="1"/> <!-- right pane -->
		</hbox>
		<spacer/>
	</groupbox>

</window>

